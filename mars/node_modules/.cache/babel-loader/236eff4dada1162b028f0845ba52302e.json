{"ast":null,"code":"var _jsxFileName = \"/Users/Axhar/Documents/hackathon/hackathon-smars-watch/mars/src/App.js\",\n    _s = $RefreshSig$();\n\n//import './App.css';\nimport React, { useState, useEffect } from 'react'; // Helpers\n\nimport formatDate from './helpers'; // API\n\nimport { API_URL } from './api'; // Components\n\nimport WeatherData from './components/Weather/WeatherData';\nimport Info from './components/Weather/Info';\nimport Unit from './components/Weather/Unit';\nimport Previous from './components/Weather/Previous'; // Img\n\nimport BGImage from './img/mars.jpg'; // Styles\n\nimport { AppWrapper, GlobalStyle, MarsWeather, InfoWrapper } from './App.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [weather, setWeather] = useState([]);\n  const [selectedSol, setSelectedSol] = useState();\n  const [metric, setMetric] = useState(true);\n  const [previous, setPrevious] = useState(false);\n  console.log(weather);\n  useEffect(() => {\n    const fetchFromAPI = async () => {\n      const weather = await (await fetch(API_URL)).json();\n      const marsWeather = weather.sol_keys.map(solKey => {\n        var _weather$solKey$AT, _weather$solKey$AT2, _weather$solKey$HWS, _weather$solKey$WD, _weather$solKey$WD$mo;\n\n        return {\n          sol: solKey,\n          maxTemp: ((_weather$solKey$AT = weather[solKey].AT) === null || _weather$solKey$AT === void 0 ? void 0 : _weather$solKey$AT.mx) || 'No data',\n          minTemp: ((_weather$solKey$AT2 = weather[solKey].AT) === null || _weather$solKey$AT2 === void 0 ? void 0 : _weather$solKey$AT2.mn) || 'No data',\n          windSpeed: Math.round(((_weather$solKey$HWS = weather[solKey].HWS) === null || _weather$solKey$HWS === void 0 ? void 0 : _weather$solKey$HWS.av) || 0),\n          windDirectionDegrees: ((_weather$solKey$WD = weather[solKey].WD) === null || _weather$solKey$WD === void 0 ? void 0 : (_weather$solKey$WD$mo = _weather$solKey$WD.most_common) === null || _weather$solKey$WD$mo === void 0 ? void 0 : _weather$solKey$WD$mo.compass_degrees) || 0,\n          date: formatDate(new Date(weather[solKey].First_UTC))\n        };\n      });\n      setWeather(marsWeather);\n      setSelectedSol(marsWeather.length - 1);\n      setLoading(false);\n    };\n\n    fetchFromAPI();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {\n      bgImage: BGImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(MarsWeather, {\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"main-title\",\n            children: \"Latest weather at Elysium Plantitia\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(WeatherData, {\n            sol: weather[selectedSol],\n            isMetric: metric\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InfoWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Info, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Unit, {\n              metric: metric,\n              setMetric: setMetric\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Previous, {\n        weather: weather,\n        previous: previous,\n        setPrevious: setPrevious,\n        setSelectedSol: setSelectedSol,\n        isMetric: metric\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"z/RqbhbOx6AeyyvObnxTsprweL4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Axhar/Documents/hackathon/hackathon-smars-watch/mars/src/App.js"],"names":["React","useState","useEffect","formatDate","API_URL","WeatherData","Info","Unit","Previous","BGImage","AppWrapper","GlobalStyle","MarsWeather","InfoWrapper","App","loading","setLoading","weather","setWeather","selectedSol","setSelectedSol","metric","setMetric","previous","setPrevious","console","log","fetchFromAPI","fetch","json","marsWeather","sol_keys","map","solKey","sol","maxTemp","AT","mx","minTemp","mn","windSpeed","Math","round","HWS","av","windDirectionDegrees","WD","most_common","compass_degrees","date","Date","First_UTC","length"],"mappings":"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","sourcesContent":["\n//import './App.css';\nimport React, { useState, useEffect } from 'react';\n// Helpers\nimport formatDate from './helpers';\n// API\nimport { API_URL } from './api';\n// Components\nimport WeatherData from './components/Weather/WeatherData';\nimport Info from './components/Weather/Info';\nimport Unit from './components/Weather/Unit';\nimport Previous from './components/Weather/Previous';\n// Img\nimport BGImage from './img/mars.jpg';\n// Styles\nimport {\n  AppWrapper,\n  GlobalStyle,\n  MarsWeather,\n  InfoWrapper,\n} from './App.styles';\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [weather, setWeather] = useState([]);\n  const [selectedSol, setSelectedSol] = useState();\n  const [metric, setMetric] = useState(true);\n  const [previous, setPrevious] = useState(false);\n  console.log(weather);\n\n  useEffect(() => {\n    const fetchFromAPI = async () => {\n      const weather = await (await fetch(API_URL)).json();\n      const marsWeather = weather.sol_keys.map((solKey) => {\n        return {\n          sol: solKey,\n          maxTemp: weather[solKey].AT?.mx || 'No data',\n          minTemp: weather[solKey].AT?.mn || 'No data',\n          windSpeed: Math.round(weather[solKey].HWS?.av || 0),\n          windDirectionDegrees:\n            weather[solKey].WD?.most_common?.compass_degrees || 0,\n          date: formatDate(new Date(weather[solKey].First_UTC)),\n        };\n      });\n      setWeather(marsWeather);\n      setSelectedSol(marsWeather.length - 1);\n      setLoading(false);\n    };\n\n    fetchFromAPI();\n  }, []);\n\n  return (\n    <>\n      <GlobalStyle bgImage={BGImage} />\n      <AppWrapper>\n        <MarsWeather>\n          {loading ? (\n            <div>Loading ...</div>\n          ) : (\n            <>\n              <h1 className='main-title'>\n                Latest weather at Elysium Plantitia\n              </h1>\n              <WeatherData sol={weather[selectedSol]} isMetric={metric} />\n              <InfoWrapper>\n                <Info />\n                <Unit metric={metric} setMetric={setMetric} />\n              </InfoWrapper>\n            </>\n          )}\n        </MarsWeather>\n        <Previous\n          weather={weather}\n          previous={previous}\n          setPrevious={setPrevious}\n          setSelectedSol={setSelectedSol}\n          isMetric={metric}\n        />\n      </AppWrapper>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}